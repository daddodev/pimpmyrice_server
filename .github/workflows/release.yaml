name: Build & Publish

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "pimpmyrice_server"
  CMD_NAME: "pimp-server"
  PACKAGE_DESCRIPTION: "The overkill theme manager"
  AUTHOR_NAME: "daddodev"
  AUTHOR_EMAIL: "daddodev@gmail.com"
  LICENSE: "MIT"

jobs:
  details:
    name: Extract tag and Details
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi


  python_build:
    name: Build Python package wheel and source tarball
    needs: [details]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install pypa/build
        run: python -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python
          path: dist/


  pypi_publish:
    name: Upload release to PyPI
    needs: [details, python_build]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  # TODO build .pkg.tar.zst
  aur_publish:
    name: Update AUR package
    needs: [details]
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - uses: actions/checkout@v4

      - name: Fetch latest version from AUR
        run: |
          latest_aur_version=$(curl -s https://aur.archlinux.org/rpc/v5/info?arg[]=${{ env.PACKAGE_NAME }} | jq -r '.results[0].Version')

          echo "Latest version on AUR: $latest_aur_version"
          echo "latest_aur_version=$latest_aur_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_aur_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on AUR."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on AUR."
          fi

      - name: Generate PKGBUILD
        run: |
          cd packaging/aur
          bash generate_pkgbuild.sh ${{ env.PACKAGE_NAME }} ${{ needs.details.outputs.new_version }} ${{ env.AUTHOR_NAME }} ${{ env.AUTHOR_EMAIL }} ${{ env.LICENSE }} "${{ env.PACKAGE_DESCRIPTION }}"

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v3.0.1
        with:
          pkgname: ${{ env.PACKAGE_NAME }}
          pkgbuild: packaging/aur/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519


  deb_build:
    name: Build .deb package
    needs: [python_build]
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - uses: actions/checkout@v4

      - name: Download python builds
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Build package
        run: |
          # Usage: build_deb.sh <deb_dir> <tarball> <email>
          bash packaging/ppa/build_deb.sh packaging/ppa/debian/ dist/${{ env.PACKAGE_NAME }}-*.tar.gz ${{ env.AUTHOR_EMAIL }}
      
      - name: Upload .deb package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: debs
          path: /tmp/debs/


  ppa_publish:
    name: Upload release to Ubuntu PPA
    needs: ["python_build"]
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - uses: actions/checkout@v4

      - name: Download python builds
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PPA
        uses: yuezk/publish-ppa-package@v2.0.1
        with:
          repository: "${{ env.AUTHOR_NAME }}/${{ env.PACKAGE_NAME }}"
          gpg_private_key: ${{ secrets.PPA_GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PPA_GPG_PASSPHRASE }}
          deb_email: "${{ env.AUTHOR_EMAIL }}"
          deb_fullname: "${{ env.AUTHOR_NAME }}"
          tarball: dist/${{ env.PACKAGE_NAME }}-*.tar.gz
          debian_dir: packaging/ppa/debian
          debmake_arguments: "-b :python3"



  # # TODO edit to run on ubuntu-latest
  # copr_publish:
  #   name: Upload release to COPR
  #   needs: [details, python_build]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: release
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Build RPM package
  #       run: |
  #         bash packaging/copr/build_rpm.sh ${{ env.PACKAGE_NAME }} ${{ needs.details.outputs.new_version }} 1 ${{ env.LICENSE }} ${{ env.AUTHOR_NAME }} ${{ env.AUTHOR_EMAIL }}
  #
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist
  #         path: dist/*.rpm
  #
  #     - name: Install COPR CLI
  #       run: |
  #         sudo dnf install -y copr-cli
  #
  #     - name: Set up COPR credentials
  #       run: |
  #         echo "$COPR_API_KEY" > ~/.copr_api_key
  #         echo "copr_username=${{ env.COPR_USER }}" > ~/.copr_config
  #       env:
  #         COPR_API_KEY: ${{ secrets.COPR_API_KEY }}
  #
  #     - name: Fetch latest version from COPR
  #       run: |
  #         latest_copr_version=$(copr-cli build list --project=${{ env.COPR_PROJECT }} --chroot=fedora-34-x86_64 | grep -oP "(?<=${{ env.PACKAGE_NAME }}-)[0-9.]+(?=\s)" | head -n 1 || echo "0.0.0")
  #         echo "Latest version on COPR: $latest_copr_version"
  #         echo "latest_copr_version=$latest_copr_version" >> $GITHUB_ENV
  #
  #     - name: Compare versions and exit if not newer
  #       run: |
  #         NEW_VERSION=${{ needs.details.outputs.new_version }}
  #         LATEST_VERSION=$latest_copr_version
  #         if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
  #           echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on COPR."
  #           exit 1
  #         else
  #           echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on COPR."
  #         fi
  #
  #     - name: Publish to COPR
  #       run:
  #         copr-cli build create --project="${{ env.PACKAGE_NAME }}" --chroot="fedora-34-x86_64" --src="${{ github.workspace }}/dist/${{ env.PACKAGE_NAME }}-*.tar.gz" --description="Package for COPR" --nvr="${{ env.PACKAGE_NAME }}-${{ github.sha }}"

  build_linux_binary:
    name: build linux binary
    needs: [details, python_build ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile ${{ env.PACKAGE_NAME }}/__main__.py --name ${{ env.PACKAGE_NAME }}-{{ needs.details.outputs.new_version }}_linux

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: linux_binary
          path: dist/


  build_windows_binary:
    name: build windows binary
    # needs: [details, python_build ]
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile src/${{ env.PACKAGE_NAME }}/__main__.py --name ${{ env.PACKAGE_NAME }}-{{ needs.details.outputs.new_version }}

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: windows_binary
          path: dist/


  build_windows_installer:
    runs-on: windows-latest
    # needs: [ details, build_windows_binary ]
    needs: [ build_windows_binary ]
    steps:
      - uses: actions/checkout@v4

      - name: Download windows binary artifact
        uses: actions/download-artifact@v3
        with:
          name: windows_binary
          path: dist

      - name: Compile installer with Inno Setup
        uses: josegonzalez/inno-setup-action@v1.2.2
        with:
          path: packaging/windows/installer.iss
          options: |
            /O+
            /DAppName=${{ env.PACKAGE_NAME }}
            /DAppCmd=${{ env.CMD_NAME }}
            /DAppVersion=${ needs.details.outputs.new_version }

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows_installer
          path: installer_output/*.exe


  github_release:
    name: Create GitHub Release
    needs: [
      details,
      python_build,
      deb_build,
      build_linux_binary,
      build_windows_binary,
      build_windows_installer,
    ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python
          path: python/

      - name: Download deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: debs
          path: debs/

      - name: Download linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux_binary
          path: linux_binary/

      - name: Download windows binary artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows_binary
          path: windows_binary/

      - name: Download windows installer artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows_installer
          path: windows_installer/

      - name: Create release dir
        run: |
          mkdir release
          cp python/* release/
          cp debs/* release/
          cp linux_binary/* release/
          cp windows_binary/* release/
          cp windows_installer/* release/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} release/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
